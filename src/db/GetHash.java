package db;
import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

// Java-программа для вычисления значения хэша SHA

public class GetHash {
    public static byte[] getSHA(String input) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance("SHA-256");// Статический метод getInstance вызывается с хэшированием SHA
        // метод digest () вызван рассчитать дайджест сообщения ввода
        return md.digest(input.getBytes(StandardCharsets.UTF_8));// и возвращаем массив байтов
    }

    public static String toHexString(byte[] hash) {
        BigInteger number = new BigInteger(1, hash); // Преобразование байтового массива в представление знака
        StringBuilder hexString = new StringBuilder(number.toString(16));// Преобразуем дайджест сообщения в шестнадцатеричное значение
        // Блокнот с ведущими нулями
        while (hexString.length() < 32) {
            hexString.insert(0, '0');
        }
        return hexString.toString();
    }



    public static void main(String args[]) {
        try {
            System.out.println("HashCode Generated by SHA-256 for:");
            String s1 = "GeeksForGeeks";
            System.out.println("\n" + s1 + " : " + toHexString(getSHA(s1)));
            String s2 = "hello world";
            System.out.println("\n" + s2 + " : " + toHexString(getSHA(s2)));
        }
        // Для указания неправильных алгоритмов дайджеста сообщений
        catch (NoSuchAlgorithmException e) {
            System.out.println("Exception thrown for incorrect algorithm: " + e);
        }
    }


    public static String returnHash(String str) {
        try {
            String hashStr = toHexString(getSHA(str));
            return hashStr;
        }
        // Для указания неправильных алгоритмов дайджеста сообщений
        catch (NoSuchAlgorithmException e) {
            System.out.println("Exception thrown for incorrect algorithm: " + e);
        }
        return "Void hash";
    }
}